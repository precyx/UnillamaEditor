package com.sorcerer {	//	import flash.display.Sprite;	import flash.display.DisplayObject;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.KeyboardEvent;	import flash.ui.Keyboard;	import flash.display.Stage;	import com.sorcerer.LevelElement;	import flash.utils.getDefinitionByName;	import com.kiko.utils.duplicateDisplayObject;	//	public class LevelElementManager {		// data		private var stage:Stage;		//		public var graphicArray:Array;		public var collisionArray:Array;		//		public function LevelElementManager(stage:Stage) {			this.stage = stage;			//			graphicArray = new Array();			collisionArray = new Array();			//			eventListeners();		}		private function eventListeners():void{			stage.addEventListener(MouseEvent.MOUSE_UP, function mouseUp(e:MouseEvent){   				for(var i:uint = 0; i < graphicArray.length; i++){					LevelElement(graphicArray[i]).stopDrag();				}			});			stage.addEventListener(MouseEvent.MOUSE_DOWN, function mouseDown(e:MouseEvent){				if(e.target is Stage) {					for(var i:uint = 0; i < graphicArray.length; i++){						LevelElement(graphicArray[i]).active = false;					}				}			});			stage.addEventListener(KeyboardEvent.KEY_DOWN, function keydown(e:KeyboardEvent){				if(e.keyCode == Keyboard.D){					trace("d pressed");					getActiveGraphicElement().clone();				}							});		}				/**		* Speichert ein grafisches LevelElement im Array.		*/		public function addGraphicElement(element:LevelElement):void {			element.addEventListener(MouseEvent.MOUSE_DOWN, function mouseDown(e:MouseEvent){				element.startDrag();				for(var i:uint = 0; i < graphicArray.length; i++){					graphicArray[i].active = false;				}				element.active = true;			});			graphicArray.push(element);		}		/**		* Gibt das LevelElement zurück, welches aktiv ist.		*/		public function getActiveGraphicElement():LevelElement{			for(var i:uint = 0; i < graphicArray.length; i++){				if( graphicArray[i].active ) return graphicArray[i];			}			return new LevelElement(this);		}		/**		* Speichert ein kollisions Element im Array.		*/		public function addCollisionElement(element:Sprite):void {			collisionArray.push(element);		}	}	}