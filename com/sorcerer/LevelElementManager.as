package com.sorcerer {	//	import com.kiko.display.Rect;	import flash.display.Sprite;	import flash.display.DisplayObject;	import flash.display.LineScaleMode;	import flash.display.CapsStyle;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.KeyboardEvent;	import flash.ui.Keyboard;	import flash.display.Stage;	import com.sorcerer.LevelElement;	import flash.utils.getDefinitionByName;	import com.kiko.utils.duplicateDisplayObject;	//	public class LevelElementManager {		// data		private var stage:Stage;		//		public var graphicArray:Array;		public var collisionArray:Array;		//		// graphics		private var activeOverlay:Sprite;		private var selectionRect:Sprite;		//		public function LevelElementManager(stage:Stage) {			this.stage = stage;			//			graphicArray = new Array();			collisionArray = new Array();			//			activeOverlay = new Sprite();			stage.addChild(activeOverlay);			selectionRect = new Sprite();			stage.addChild(selectionRect);			//			eventListeners();		}		private function eventListeners():void{			stage.addEventListener(MouseEvent.MOUSE_UP, function mouseUp(e:MouseEvent){   				for(var i:uint = 0; i < graphicArray.length; i++){					LevelElement(graphicArray[i]).stopDrag();				}				stage.removeEventListener(Event.ENTER_FRAME, loop);			});			stage.addEventListener(MouseEvent.MOUSE_DOWN, function mouseDown(e:MouseEvent){				if(e.target is Stage) {					for(var i:uint = 0; i < graphicArray.length; i++){						LevelElement(graphicArray[i]).active = false;					}					drawActiveOverlay(null);				}				stage.addEventListener(Event.ENTER_FRAME, loop);			});			stage.addEventListener(KeyboardEvent.KEY_DOWN, function keydown(e:KeyboardEvent){				if(e.keyCode == Keyboard.D){					trace("d pressed");					if(getActiveGraphicElement()) getActiveGraphicElement().clone();				}				if (e.keyCode == Keyboard.DELETE || e.keyCode == Keyboard.E) {					trace("del");					removeGraphicElement( getActiveGraphicElement() );					drawActiveOverlay(null);				}				if (e.keyCode == Keyboard.LEFT) {					getActiveGraphicElement().x -= 5;				}				if (e.keyCode == Keyboard.RIGHT) {					getActiveGraphicElement().x += 5;				}				if (e.keyCode == Keyboard.UP) {					getActiveGraphicElement().y -= 5;				}				if (e.keyCode == Keyboard.DOWN) {					getActiveGraphicElement().y += 5;									}								drawActiveOverlay(getActiveGraphicElement());			});		}				/**		 * @param element Speichert ein LevelElement im Array.		 */		public function addGraphicElement(element:LevelElement):void {			var me:LevelElementManager = this;			element.addEventListener(MouseEvent.MOUSE_DOWN, function mouseDown(e:MouseEvent){				element.startDrag();				for(var i:uint = 0; i < graphicArray.length; i++){					graphicArray[i].active = false;				}				element.active = true;				drawActiveOverlay(element);				stage.addEventListener(Event.ENTER_FRAME, loop);			});			graphicArray.push(element);		}						/**		 * @return Gibt das LevelElement zurück, welches aktiv ist.		 */		public function getActiveGraphicElement():LevelElement{			for(var i:uint = 0; i < graphicArray.length; i++){				if( graphicArray[i].active ) return graphicArray[i];			}			return null;		}		/**		 * @param elem Level entfernt ein LevelElement		 */		public function removeGraphicElement(elem:LevelElement):void {			if ( elem == null ) return;			for (var i:uint = 0; i < graphicArray.length; i++) {				if (graphicArray[i] == elem) {					graphicArray.splice(i, 1);					elem.parent.removeChild(elem);					break;				}			}		}		/**		 * @param elem Zeichnet einen Active Rahmen ums LevelElement.		 */		private function drawActiveOverlay(elem:LevelElement):void {			activeOverlay.graphics.clear();			if (!elem) return;			activeOverlay.graphics.lineStyle(2, 0xff00aa, 1, false, LineScaleMode.NONE);			activeOverlay.graphics.drawRect(0, 0, elem.width, elem.height);			activeOverlay.x = elem.x;			activeOverlay.y = elem.y;			stage.setChildIndex(activeOverlay, stage.numChildren - 1);		}				/*		 * Events		 */				 		/**		 * LevelElementManager Loop		 */		private function loop(e:Event):void {			drawActiveOverlay( getActiveGraphicElement() );					}		  				/**		* Speichert ein kollisions Element im Array.		*/		public function addCollisionElement(element:Sprite):void {			collisionArray.push(element);		}	}	}